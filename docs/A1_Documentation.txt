----------------------------------------------------------------------------------------------------
	COMP345 - ASSIGNMENT 1 - DOCUMENTATION
	GROUP - 17
		- Kevin McAllister (40031326)
		- Karim Loulou (40027203)
		- Annes Cherid (40038453)
----------------------------------------------------------------------------------------------------

// Temporary notes during writing (remove when documentation is complete!!!)
// Follow template already included in this file for each of the components
// Each component should contain:
//	- Description of its main purpose
//	- Type of component it is (Object / Static Functions)
//	- List of its accessible functions + quick description of its usage
//	- Author of file? (Maybe not necessary)

----------------------------------------------------------------------------------------------------
GBMap.h / GBMap.cpp:
Description:	Handles the creation and modification of the Game Board and its related components
Type:	Object
Functions:
	GBMap(int num_players)										// Default Constructor
	GBMap(vector<GBNode>* Nodes, vector<vector<int>>* Edges)	// Constructor for MapLoader
	~GBMap()													// Destructor
	void AddTile(int board_space, Tile harvest_tile)			// Function to add tiles to the board
	void Draw()													// Outputs board to the console

Subclass:	GBNode
Description:	Stores data of the tiles that are placed on the board
Functions:
	GBNode(int node_number)										// Constructor
	~GBNode()													// Destructor

VGMap.h / VGMap.cpp:
Description:	Handles the creation and modification of the Village board and its related components
Type:	Object
Functions:
	VGMap(int player_number)									// Default Constructor
	VGMap(vector<VGNode>* Nodes, vector<vector<int>>* Edges)	// Constrcutor for MapLoader
	~VGMap()													// Destructor
	void AddTile(int board_space, Tile building_tile)			// Function to add tiles to the board
	void Draw()													// Outputs board to the console
	
Subclass:	VGNode
Description:	Stores data of tiles that are placed on the board and costs to place them
Functions:
	VGNode(int node_number)										// Constructor
	~VGNode()													// Destructor
	
GBMapLoader.h / GBMapLoader.cpp:
Description:	Handles the loading of GBMaps from files
Type:	Static Functions
Functions:
	static void LoadMap(string map_file)						// Loads map from file
	static vector<int>* GetNodes()								// Returns stored nodes loaded from file
	static vector<vector<int>>* GetEdges()						// Returns stored edges loaded from file
	
VGMapLoader.h / VGMapLoader.cpp:
Description:	Handles loading of VGMaps from files
Type:	Static Functions
Functions:
	static void LoadMap(string map_file)						// Loads map from file
	static vector<int>* GetNodes()								// Returns stored nodes loaded from file
	static vector<vector<int>>* GetEdges()						// Returns stored edges loaded from file

Resources.h / Resources.cpp:
Description:	Handles the creation and modification of the Harvest Tiles and its related components.
		Also, it shuffles the cards and handles the angle of the Harvest Tile.
subclass:	TileDeck
Functions:
    	vector < vector<char>> allCard() 			//vector of vector wich reprensents all possible tiles
	draw(stack<Building>& deck)				//draws from deck pile
 	rotate(vector<char>& arr);				//rotate once clock wise a vector representing a tile
	shuffle(vector <vector<char>>& vec, int a, int b);	//Swaps 2 random Tiles, repeat to make a full shuffle 
	fullShuffle(vector <vector<char>>& vec);		//Returns a repeated shuffle to make it a full shuffle	
	stack<vector<char>> createDeck(vector<vector<char>> cards); //Creates a stack full of cards
	char getTopLeftOfTile(vector<char>); 			//Gets the value of the topleft tile and adds it to ressource marker
	char getTopRightOfTile(vector<char>);
	char getBottomLeftOfTile(vector<char>);
	char getBottomRightOfTile(vector<char>);
														// Outputs board to the console

Subclass:	BuildingDeck
Description:	Handles the creation and modification of the Building cards and its related components.
		Also, it shuffles the cards and handles the flip of the card.

Functions:
	Building draw(stack<Building>& deck);			//draws from deck pile										// Destructor
	void shuffle(vector<Building>& vec, int a, int b);	//Swaps 2 random Buidling tokens, repeat to make a full shuffle 
	void fullShuffle(vector<Building>& vec);		//Returns a repeated shuffle to make it a full shuffle
	stack<Building> createDeck(vector<Building> cards);	//Creates deck for the building cards



